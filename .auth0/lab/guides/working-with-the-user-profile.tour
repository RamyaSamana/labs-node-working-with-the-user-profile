{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Working with the user profile",
  "steps": [
    {
      "file": "README.md",
      "line": 1,
      "title": "What you'll do",
      "description": "## What you'll learn\n\n**Here's what you'll do:**\n\n* Retrieve the normalized profile from the userinfo endpoint\n* Update app metadata\n* Update user metadata"
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Find a user",
      "description": "## Find a user\n\n**Ensure you're working in your labs- tenant!**\n\n1. #### Log into the Auth0 Dashboard.  \n\n    You will see the Activity page displayed. This page shows a summary of authentication and signup activity. Both latest logins and latest signups are displayed at the bottom of the page.  \n\n1. #### In the left-hand navigation, click **User Management**, then, **Users**. The Users list page is displayed.  \n\n   ![profile-1](./.auth0/lab/guides/images/profile-1.gif)  \n\n    Here you can search for users. Let’s find the database connection user you created in the _Create an Application_ lab.  \n\n1. #### In the search bar, change the **Search by** drop down to **_Email_**.  \n\n    ![profile-2](./.auth0/lab/guides/images/profile-2.gif)  \n\n    Notice that the search field has been pre-populated to search for the email address sample@auth0.com using the syntax:  \n\n    **email:\"sample@auth0.com\"**  \n\n    If you want to know more about the search syntax, read the [User Search](https://auth0.com/docs/users/user-search) documentation.  \n\n1. #### Change the search to read:  \n\n    ```\n    email:*+auth0labs*  \n    ```\n\n    and hit the **Enter** key.  \n\n    The wildcards in the search will return any email address containing the string “+auth0labs” and you ought to see the user you created in the _Create an Application_ lab as the result.   \n\n    ![profile-3](./.auth0/lab/guides/images/profile-3.gif)  \n\n1. #### Click the +auth0labs user account.  \n\n    You will see the user’s details page displayed which allows you to interact with the user’s account and profile information. The user’s name, profile image, and user id are displayed in the header next to an **Actions** menu (the dropdown menu on the top right).   \n\n    ![profile-4](./.auth0/lab/guides/images/profile-4.gif)  \n\n1. #### Click the **Actions** menu button.  \n\n    ![profile-5](./.auth0/lab/guides/images/profile-5.gif)  \n\n    A list of useful user actions is available here. You can Block or Delete the user as well as send a verification email to their email address.  \n\n    Note the user’s name, email address, browser, signup date, and last login date are displayed on the Details tab.  \n\n    The user’s name is currently set the same as the email value. in the next section, we'll set the name to a more accurate value."
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Change user parameters",
      "description": "## Change user parameters\n\n1. #### Click the **Edit** link under the user’s name.  \n    ![profile-6](./.auth0/lab/guides/images/profile-6.gif)   \n\n1. #### Update the name to “Dave Grohl” and click the **Save** button. The user’s display name is updated.  \n     ![profile-7](./.auth0/lab/guides/images/profile-7.gif)   \n\n1. #### Click the **Edit** link under the user’s email.  \n\n    If you see the text **(verified)** then you have responded to a previous email verification request sent to your email account.  \n\n    If you don’t see **(verified)** you will see an option to manually verify the email address here. Go ahead and click the \"**Set email as verified\"** link if it is displayed, and click the **Save** button. The user’s email address is now marked as verified.  \n\n    ![profile-8](./.auth0/lab/guides/images/profile-8.gif)  \n\n1. #### Scroll down to the **Metadata** section of the user’s Details.  \n\n    Both the **user\\_metadata** and **app\\_metadata** values are displayed here in a JSON editor.  \n\n1. #### Update the **user\\_metadata** object to include a key of _“band”_ with the value of _“Foo Fighters.”_  \n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M04-L01/img-2.png)  \n\n1. #### Update the **app\\_metadata** object to include a key of “vip” with a value of true.  \n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M04-L01/img-1.png)  \n\n1. #### Click the **Save** button. You should see a successful save message.\n\n    ![profile-9](./.auth0/lab/guides/images/profile-9.gif)  "
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Retrieve any user profile from the Management API",
      "description": "## Retrieve any user profile from the Management API\n\n1. #### If you're not already logged in, log in to the Auth0 Dashboard and ensure that you're on your labs- tenant.  \n\n1. #### In the left-hand navigation, click **Applications > APIs**.  \n\n    The _APIs_ list view is displayed. For more on APIs, check out _lab 6 Working with APIs_. For the purposes of this lab, notice that an API already exists for your tenant, the _Auth0 Management API_.  \n\n    Yes, that is right we use Auth0 to secure our own APIs! The Management API is a system API with an identifier of _[https://TENANT.us.auth0.com/api/v2](https://TENANT.us.auth0.com/api/v2)_.  \n\n    ![profile-10](./.auth0/lab/guides/images/profile-10.gif)  \n\n1. #### Click the **Auth0 Management API** link to display the **Settings** for this API.  \n\n    Note the warning alerting you to the fact this is a special API.  \n\n    ![profile-11](./.auth0/lab/guides/images/profile-11.gif)  \n\n1. #### Click the **Permissions** tab located at the top of the page.  \n\n    These are all the fine grain permissions available for this API.  \n\n    ![profile-12](./.auth0/lab/guides/images/profile-12.gif)  \n\n1. #### Click the **API Explorer** tab located at the top of the page.  \n\n    The _API Explorer_ is interactive documentation for the _Auth0 Management API_. It can be used to explore and prototype calls to the API without having to write a line of code. For the explorer to work, you need to register an application to be used for accessing it.   \n\n\n1. #### Click the **Create & Authorize Test Application** button.  \n\n    The page updates to show you an Access Token and steps to use it in the API Explorer.   \n\n    ![profile-13](./.auth0/lab/guides/images/profile-13.gif)  \n\n1. #### Click the **Copy** button to the right of the Access Token.  \n\n    ![profile-14](./.auth0/lab/guides/images/profile-14.gif)  \n\n1. #### Open a tab in your browser and navigate to [**jwt.io**](https://jwt.io/).  \n\n1. #### Paste the token in the field labeled **Encoded**, replacing the sample token.  \n\n    ![profile-15](./.auth0/lab/guides/images/profile-15.gif)  \n\n    Look at the decoded JSON Payload in the **Decoded** field on the right. Here you can see the token was issued by your tenant via the **iss** claim. It has an **audience (aud)** claim for your tenant’s Management API endpoint. And all the permissions are listed in the **scope** claim.  \n\n    This means that this Access Token can be used to make calls to all of the endpoints of the Management API. So it is very useful for the API Explorer. Remember we will go into much more detail about what all of this means in _lab 6 Working with APIs_. For now, know that this Access Token is all we need for the explorer.  \n\n1. #### Return to the **Auth0 Management API** details view on the **API Explorer** tab.  \n\n1. #### Scroll down to the **Using this token in the API Explorer** section. \n\n1. #### Click the **Management API Explorer** link listed in step 1 there within the dashboard.\n    The **Management API Explorer** will open in a new tab. Feel free to bookmark this tool, it is quite useful. It can always be found at [**https://auth0.com/docs/api/management/v2**](https://auth0.com/docs/api/management/v2).  \n\n    ![profile-16](./.auth0/lab/guides/images/profile-16.gif)  \n\n1. #### Click the **SET API TOKEN** button located in the upper left corner of the page.  \n\n    The **Set Management API Token** modal dialog is displayed.  \n\n1. #### Paste the Access Token into the **API Token** field and click the **Set Token** button.\n    The Explorer will update to show your tenant domain and the allowed scopes provided by the Access Token in the left-hand navigation.  \n\n\n    ![profile-17](./.auth0/lab/guides/images/profile-17.gif)  \n\n1. #### Scroll the left-hand navigation down to the **Users** section.  \n\n1. #### Click the **Users** link in the left-hand navigation.\n    The navigation expands to show all of the endpoints provided by this api for managing users. The first endpoint, **List or search users**, is selected. Looking at the documentation for this endpoint, you can see it requires a **GET** request to _/api/v2/users_ with an access token containing the `_read:users_` and `_read:user\\_idp\\_tokens_` scopes.  \n\n\n    ![profile-18](./.auth0/lab/guides/images/profile-18.gif)  \n\n1. #### Scroll down to see a list of the parameters accepted by this endpoint.  \n\n1. #### Click the **TRY** button.\n    A request is made to the Management API and the **List or search users** modal dialog is displayed. In this modal, you can see that a GET request was made to the endpoint described in the **REQUEST URL** section. The **RESPONSE CODE** section shows the [**HTTP Status Code**](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) returned from the API, in this case, a _200_.\n    Finally, the **RESPONSE BODY** section displays the JSON response from the API.   \n\n\n1. #### Locate the user you updated earlier in this lab in the list.\n    It should be pretty easy because at this point we have not created many users. But as you can imagine this list will grow quickly and you will need to filter it using the parameters available to the API endpoint.  \n    Of course, you do not have to search for a user if you already know their user id.  \n\n    ![profile-19](./.auth0/lab/guides/images/profile-19.gif)  \n\n1. #### Locate the **user\\_id** property of the user and **copy its value**. \n\n    ![profile-20](./.auth0/lab/guides/images/profile-20.gif)  \n\n1. #### Dismiss the modal dialog by clicking the **Close (X)** icon located in the upper right-hand corner.  \n\n1. #### In the left-hand navigation under the Users section, click the **Get a user** link.\n    The _Get a user_ endpoint documentation is displayed. It requires a **GET** request to _/api/v2/users/{id}_ with an Access Token containing the _read:users_ and _read:user\\_idp\\_tokens_ scopes. In the **Parameters** section, you can see the _id_ parameter is required.  \n\n1. #### Paste the user’s id into the _id_ field of the **Parameters** section.  \n\n1. #### Click the **TRY** button.\n\n    ![profile-21](./.auth0/lab/guides/images/profile-21.gif)  \n\n    You should see a successful **Get a User** modal dialog displayed containing the user profile of the user. This profile contains all of the stored profile information of the user including **user\\_metadata** and **app\\_metadata** values you set earlier.\n    Note there are other useful properties contained in the profile that you have not seen yet. These include the number of times this user has authenticated, the last time they authenticated, and the IP address associated with the last login."
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Update app and user metadata",
      "description": "## Update app and user metadata\n\n1. #### Navigate to the **Management API Explorer** [_https://auth0.com/docs/api/management/v2/_](https://auth0.com/docs/api/management/v2/). \n\n    If your Access Token has been reset, follow the steps in the previous exercise to set it properly. Specifically steps 1-7 to obtain an Access Token and steps 13-14 to set the token in the explorer.  \n\n1. #### In the left-hand navigation, scroll to the **Users** section and click it.  \n\n    The menu will expand displaying the list of user endpoints.  \n\n1. #### Locate and click the **Update a user** link in the submenu.  \n\n    The **Update a user** documentation is displayed. It requires a **PATCH** request to _/api/v2/users/{id}_ with an Access Token containing the _update:users_ and _update:users\\_app\\_metadata_ scopes.  \n\n    The documentation goes into detail on the fields that are available for update on a user profile. It lists considerations for updating specific fields as well as several examples of how to update specific fields.  \n\n1. #### Scroll to the **Parameters** section.  \n\n    ![profile-22](./.auth0/lab/guides/images/profile-22.gif)  \n\n1. #### Paste the _user id_ of the user you have been working with into the **id** field.  \n\n    You can find the user’s id using the Management Dashboard as described previously.\n\n    ![profile-23](./.auth0/lab/guides/images/profile-23.gif)    \n\n1. #### Paste the following JSON into the **body** field.  \n\n    ```js\n    {\n      \"app_metadata\": {\n        \"vip\": false\n      }\n    }\n    ```\n\n1. #### Click the **TRY** button.  \n\n    ![profile-24](./.auth0/lab/guides/images/profile-24.gif)    \n\n    You should see a successful **Update a user** modal dialog displayed containing the updated user profile in the **RESPONSE BODY** section. You should also see that the value of the _VIP_ flag is set to false now in the _app\\_metadata_ property.  \n\n1. #### Dismiss the **Update a user** modal dialog by clicking the **Close (X)** button in the upper right-hand corner.  \n\n1. #### Update the **body** field of the **Parameters** section to set the _vip_ flag to the value of _null_.  \n\n    ```js\n    {\n      \"app_metadata\": {\n        \"vip\": null\n      }\n    }\n    ```\n\n1. #### Click the **TRY** button again.  \n\n    ![profile-25](./.auth0/lab/guides/images/profile-25.gif)    \n\n    Note this time, by setting the _VIP_ flag to a value of _null_ the _VIP_ property was removed completely. This works with most fields of the profile. If you do not want to update the field but instead remove it completely, set it’s value to _null_.  \n      \n    The **user\\_metadata** field can be updated in exactly the same way. To update **user\\_metadata**, no special scopes are required as with **app\\_metadata**. The scope _update:users_ is all that is required.  \n      \n    In a previous exercise, you set a **user\\_metadata** property of _band_ to the value of _Foo Fighters_ for the user using the Auth0 Management Dashboard. Let’s add an additional property to store the instrument played by the user.  \n\n1. #### Dismiss the **Update a user** modal dialog by clicking the **Close (X)** button in the upper right-hand corner.  \n\n1. #### Update the **body** field of the **Parameters** section to add the _instrument_ property with the value of _Guitar_.  \n  \n    ```js\n    {\n      \"user_metadata\": {\n        \"instrument\": \"guitar\"\n      }\n    }\n    ```\n\n1. #### Click the **TRY** button one last time.  \n\n    Notice in the **RESPONSE BODY** field the _instrument_ field has been added to the **user\\_metadata** object. The value for the _band_ property is left intact and the instrument field was merged into the **user\\_metadata** object. Remember that the **Update a user** endpoint is called with the _PATCH_ HTTP verb, so the update follows merge semantics.\n\n    ![profile-26](./.auth0/lab/guides/images/profile-26.gif)    "
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Recap",
      "description": "## Recap\n\n**In this lab you:**\n\n* Explored user profiles in the Dashboard.\n* Retrieved the normalized profile of a user from the userinfo endpoint.\n* Updated app metadata using the management API explorer.\n* Updated user metadata using the management API explorer."
    }
  ]
}